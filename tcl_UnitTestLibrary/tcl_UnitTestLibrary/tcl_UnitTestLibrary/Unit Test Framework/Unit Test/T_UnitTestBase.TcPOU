<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_UnitTestBase" Id="{db1f4e28-4a18-401b-8b29-e7f500ef63dc}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK ABSTRACT T_UnitTestBase IMPLEMENTS I_UnitTest
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    {attribute 'instance-path'}
    {attribute 'no_init'}
    {attribute 'analysis' := '-33'} // Inhibit unused variable warning
    InstanceName : T_MaxString;     // Initialised with the instance name
    TestName     : T_MaxString;

    _TestCompleted : BOOL;
    _TestFailed    : BOOL;
    State          : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{a5772276-00c5-43a4-85c1-e780c7c7de3b}" />
    <Folder Name="Properties" Id="{eb7e9c1f-ae66-405a-820c-688b53e1a9a9}" />
    <Method Name="AssertEquals_ANY" Id="{8c39ac6a-e3a4-4e64-8b71-f758c94e977f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_ANY : BOOL
VAR_INPUT
    Expected : ANY;
    Actual   : ANY;
    Message  : T_MaxString;
END_VAR
VAR
    ComparisonResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ComparisonResult := MEMCMP(pBuf1 := Expected.pValue,
                           pBuf2 := Actual.pValue,
                           n     := DINT_TO_UDINT(Actual.diSize));

IF Expected.TypeClass <> Actual.TypeClass THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;

ELSIF Expected.diSize <> Actual.diSize THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;

ELSIF ComparisonResult <> 0 THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_ANY := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BOOL" Id="{9b94f5a5-3f4f-4415-b23b-6241a645ab07}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BOOL : BOOL
VAR_INPUT
    Expected : BOOL;
    Actual   : BOOL;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_BOOL := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BYTE" Id="{08150b43-4ff5-4e6d-953b-1154960624e2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BYTE : BOOL
VAR_INPUT
    Expected : BYTE;
    Actual   : BYTE;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_BYTE := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DINT" Id="{eb3056ea-2f26-4cff-a482-a3994eed33c8}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_DINT : BOOL
VAR_INPUT
    Expected : DINT;
    Actual   : DINT;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_DINT := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INT" Id="{42545341-2d84-46fc-9339-3e8a2b1e71b8}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_INT : BOOL
VAR_INPUT
    Expected : INT;
    Actual   : INT;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_INT := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LINT" Id="{680dbc81-25a4-4297-bce7-fc7a1394820c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_LINT : BOOL
VAR_INPUT
    Expected : LINT;
    Actual   : LINT;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_LINT := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LREAL" Id="{0e4ee858-c05e-426c-a0eb-481c1ac21bf1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_LREAL : BOOL
VAR_INPUT
    Expected : LREAL;
    Actual   : LREAL;
    Delta    : LREAL;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) > Delta THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_LREAL := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_PVOID" Id="{05e72387-7114-492d-85df-e3702e9e13b2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_PVOID : BOOL
VAR_INPUT
    Expected : PVOID;
    Actual   : PVOID;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_PVOID := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_REAL" Id="{65d8a8a1-9a76-4554-b6d5-1a0075d640fb}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_REAL : BOOL
VAR_INPUT
    Expected : REAL;
    Actual   : REAL;
    Delta    : REAL;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) > Delta THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_REAL := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_STRING" Id="{922f5d37-eaf4-494b-9220-811e46507baa}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_STRING : BOOL
VAR_INPUT
    Expected : T_MaxString;
    Actual   : T_MaxString;
    Message   : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_STRING := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UDINT" Id="{b4316d77-900c-4326-882d-ca3aafbaea09}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_UDINT : BOOL
VAR_INPUT
    Expected : UDINT;
    Actual   : UDINT;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_UDINT := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UINT" Id="{eae747e6-05b0-4235-851e-2602e98dde70}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_UINT : BOOL
VAR_INPUT
    Expected : UINT;
    Actual   : UINT;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_UINT := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_ULINT" Id="{4c66f248-c3df-4371-8d92-3988dcc92ed9}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_ULINT : BOOL
VAR_INPUT
    Expected : ULINT;
    Actual   : ULINT;
    Message  : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertEquals_ULINT := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertIsTrue" Id="{cad875ec-dfd3-4726-81dd-a6735f47baa6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertIsTrue : BOOL
VAR_INPUT
    Condition : BOOL;
    Message   : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Condition THEN
    F_LogResult(TestName, FormatStringEx1('Assertion Failed - %s', Message));
    TestFailed := TRUE;
    RETURN;
END_IF

AssertIsTrue := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="BaseClass" Id="{b4d027a7-046f-48d1-8468-ee31a4969371}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY BaseClass : I_UnitTest]]></Declaration>
      <Get Name="Get" Id="{70254247-b8af-4d35-af04-a3ea68849a8d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseClass := THIS^;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Init" Id="{f9ce4d7f-44b0-4fb5-81b4-e0c1e331d42a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ABSTRACT Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitBase" Id="{c6c815cd-69fa-4977-953d-d0e1df3e2361}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FINAL InitBase
VAR
    StringSplitter : StringSplitter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringSplitter.Init(Str := InstanceName, Delim1 := '.', Delim2 := '');
WHILE StringSplitter.HasMore() DO
    TestName := StringSplitter.GetNext(); // to get last sub-section
END_WHILE

State         := 0;
TestFailed    := FALSE;
TestCompleted := FALSE;

Init();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Name" Id="{0404f2a6-6d2f-43ce-8288-d9af3f97471a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Name : T_MaxString
]]></Declaration>
      <Get Name="Get" Id="{23ff53f7-40cf-4dbc-ae96-089bca3dca34}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := TestName;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RunTest" Id="{c72e0459-07ad-41cb-aa90-04d972433a01}" FolderPath="Methods\">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'} // inhibit unused variable warning
METHOD ABSTRACT RunTest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="TestCompleted" Id="{2c6255e4-e476-4dee-8897-fed2ded26b5a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TestCompleted : BOOL]]></Declaration>
      <Get Name="Get" Id="{b3c15a73-0247-4742-9a74-f07336c20bf4}">
        <Declaration><![CDATA[PUBLIC
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TestCompleted := _TestCompleted;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ad11a1d3-bb4b-4f00-b20e-3b78d2e07e57}">
        <Declaration><![CDATA[PROTECTED
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TestCompleted := TestCompleted;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TestFailed" Id="{00cc0457-806b-4c3e-b342-8020d5b41549}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TestFailed : BOOL]]></Declaration>
      <Get Name="Get" Id="{aa3f4237-7e3a-4059-b45a-a9bca92ca4d4}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[TestFailed := _TestFailed;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2ab0aa07-ac71-4498-8066-a1ebdcc81657}">
        <Declaration><![CDATA[PROTECTED]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TestFailed := TestFailed;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>