<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="T_ListOfTests" Id="{1fcff8f0-b8c4-4bed-b839-fdb26fdb9776}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_ListOfTests IMPLEMENTS I_ListOfTests
VAR
    _TestGroupName       : T_MaxString;
    Buffer               : FB_DynMem_Buffer(ipMemMan := DynamicMemoryManager);
    DynamicMemoryManager : FB_DynMem_Manager;
    pTest                : POINTER TO I_UnitTest;
    _Count               : DINT;
    Capacity             : DINT;
	
	FindTestResult : DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{88ea0914-3836-4c42-892b-eaef76e9b52e}" />
    <Folder Name="Properties" Id="{ebcc07c5-4fc8-427f-8482-a63a96860394}" />
    <Method Name="AddTest" Id="{4faaef0c-95d4-47eb-bad8-5f502cf946ca}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AddTest
VAR_INPUT
    Test : I_UnitTest;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Count = Capacity THEN
    Capacity := Capacity * 2;
    Buffer.Resize(nSize     := DINT_TO_UDINT(Capacity) * SIZEOF(PVOID),
                  bPreserve := TRUE,
                  bReset    := FALSE);

    pTest := Buffer.pBuffer;
END_IF

pTest[_Count] := Test;
_Count        := _Count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{392cea44-d6e9-4110-b6d9-4fed5b76a2ec}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Buffer.Clear();
_Count := 0;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{3952cc7c-1071-4603-8d76-4fe94cd90db2}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Count : DINT
]]></Declaration>
      <Get Name="Get" Id="{0e88bdd7-52c9-4eea-969d-92abc8c68f8b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _Count;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{b4bcf37e-def8-4b6e-bf9c-b2a96004e198}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
    bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN
    Buffer.DeleteBuffer();
    pTest := 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c7aec280-ba2a-4496-90e8-87d0d03568b6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains  : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode   : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    Capacity      : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Buffer.CreateBuffer(nSize  := DINT_TO_UDINT(Capacity) * SIZEOF(PVOID),
                    bReset := TRUE);

pTest                := Buffer.pBuffer;
THIS^.Capacity       := Capacity;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindTestIndex" Id="{c5dc6a3b-8a7a-4a25-92be-41b08efa463c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FindTestIndex : DINT
VAR_INPUT
	Test : I_UnitTest;
END_VAR
VAR
	NextTest : I_UnitTest;
	i : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _Count - 1 DO
	NextTest := GetTest(i);
	IF NextTest = Test THEN
		FindTestIndex := i;
		FindTestResult := i;
		RETURN;
	END_IF
END_FOR
FindTestIndex := -1;
FindTestResult := -1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTest" Id="{da1f2a72-8905-472e-8ebd-a6a8733af20d}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GetTest : I_UnitTest
VAR_INPUT
    Index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < _Count AND Index >= 0 THEN
    GetTest := pTest[Index];
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTest" Id="{96992a06-c0d6-44ff-b39e-3d723578e002}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetTest : I_UnitTest
VAR_INPUT
    Test : I_UnitTest;
    Index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < _Count AND Index >= 0 THEN
    pTest[Index] := Test;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="TestGroupName" Id="{4b9efce6-42f7-4162-bc4f-a10e5278f21e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TestGroupName : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{4f62105e-7399-4c9f-8ccd-8a4f527231a8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TestGroupName := _TestGroupName;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>